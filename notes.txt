
* Create Scafold :
    sudo npx create-react-app netflix-gpt

* Run your project :
    cd netflix-gpt
    npm start

* Delete unnecessary default UI provided by Scafold
    This will give you a clean slate to begin your project

* Install tailwind
    - Install Tailwind CSS
        Install tailwindcss via npm, and then run the init command to generate your tailwind.config.js file.

        npm install -D tailwindcss
        npx tailwindcss init

    - Configure your template paths
        Add the paths to all of your template files in your tailwind.config.js file.

        /** @type {import('tailwindcss').Config} */
        module.exports = {
        content: [
            "./src/**/*.{js,jsx,ts,tsx}",
        ],
        theme: {
            extend: {},
        },
        plugins: [],
        }

    - Add the Tailwind directives to your CSS
        Add the @tailwind directives for each of Tailwind’s layers to your ./src/index.css file.

        @tailwind base;
        @tailwind components;
        @tailwind utilities;

    - test by including following css in your code
        App.js
        <div className="text-3xl font-bold text-green-800">

    - run the project
        npm start

* Clean up and setup the project folder structure

    - Delete following file 
        App.css

    - Clean your App.js file by removing all the unnecessary thing.

    - Create following folders in src folder
        1. components
        2. utils

    - Create following components in components folder using 'rafce'
        1. Body.js
        2. Header.js
        3. Login.js
        4. Browse.js 


* Setup routing in your project 
    - installation
        npm i -D react-router-dom

    - then setup you Body.js component like this =>
        import React from "react";
        import Login from "./Login";
        import Browse from "./Browse";
        import { RouterProvider, createBrowserRouter } from "react-router-dom";

        const Body = () => {
            const appRouter = createBrowserRouter([
                { path: "/", element: <Login /> },
                { path: "/browse", element: <Browse /> },
            ]);

            return (
                <div>
                <RouterProvider router={appRouter} />
                </div>
            );
        };

        export default Body;

* Add some CSS to Login and Header components to look like Netflix

* Validation 
    you can use Formik library for form Validation.
    REF : https://formik.org

* useRef hook
    useRef is a Hook that lets you reference a value that's not needed for rendering.

    Example => 

        const email = useRef(null);
        const password = useRef(null);

        <input
          ref={email}
          type="text"
          placeholder="Email Address"
          className="p-4 my-4 w-full rounded-md bg-gray-700"
        />
        <input
          ref={password}
          type="password"
          placeholder="Password"
          className="p-4 my-4 w-full rounded-md bg-gray-700"
        />

        you can retrive the values like this =>
            console.log(email.current.value);
            console.log(password.current.value);

* To prevent form from loading use preventDefault

    <form onSubmit={(e) => e.preventDefault()} >
    </form>

* Adding Firebase for authentication
    - Create a web project in firebase.google.com
        - provide a name of your project.
        - Add Firebase to your project
            - Register app
            - Add Firebase SDK : npm install firebase
            - create a new file firebase.js and add following config

                // Import the functions you need from the SDKs you need
                import { initializeApp } from "firebase/app";
                import { getAnalytics } from "firebase/analytics";
                // TODO: Add SDKs for Firebase products that you want to use
                // https://firebase.google.com/docs/web/setup#available-libraries

                // Your web app's Firebase configuration
                // For Firebase JS SDK v7.20.0 and later, measurementId is optional
                const firebaseConfig = {
                apiKey: "AIzaSyBKe4FtCC_SWIS7TWeByHC1P6b94T_CNlY",
                authDomain: "netflixgpt-ae585.firebaseapp.com",
                projectId: "netflixgpt-ae585",
                storageBucket: "netflixgpt-ae585.appspot.com",
                messagingSenderId: "344027778287",
                appId: "1:344027778287:web:53d4a896c91f576bdc5f1a",
                measurementId: "G-8C2FCN1CCX"
                };

                // Initialize Firebase
                const app = initializeApp(firebaseConfig);
                const analytics = getAnalytics(app);

            - Install Firebase CLI
                npm install -g firebase-tools

            - Deploy build
                1. firebase login
                2. firebase init
                    This will ask several inputs to configure 

                    a. Which firebase feature do you want to setup for this Directory?
                    SELECT : Hosting : Configure files for firebase hosting and (optionally) setup Github action deploys

                    b. Use an existing poroject

                    c. select thr project id

                    d. What do you want to use as your public directory?
                    ANS : build

                    e. Configure as a single page app? 
                    no

                    f. Set up automatic builds and deploys with Github?
                    no

                    This will create firebase.json file and firebaserc files

                    Now create a build by 
                        npm run build
                        
                    This will create a build folder in your project.
                    once created run following command to deploy 
                        firebase deploy

                            === Deploying to 'netflixgpt-ae585'...

                            i  deploying hosting
                            i  hosting[netflixgpt-ae585]: beginning deploy...
                            i  hosting[netflixgpt-ae585]: found 14 files in build
                            ✔  hosting[netflixgpt-ae585]: file upload complete
                            i  hosting[netflixgpt-ae585]: finalizing version...
                            ✔  hosting[netflixgpt-ae585]: version finalized
                            i  hosting[netflixgpt-ae585]: releasing new version...
                            ✔  hosting[netflixgpt-ae585]: release complete

                            ✔  Deploy complete!

                            Project Console: https://console.firebase.google.com/project/netflixgpt-ae585/overview
                            Hosting URL: https://netflixgpt-ae585.web.app


        - Go to authentication and select Sign-in providers
            enable Email/Password

        - Implement Sign Up and Sign In Firebase API 
            REF: https://firebase.google.com/docs/auth/web/password-auth#create_a_password-based_account

* Integrating Redux store in project 

    - installation
        npm i -D @reduxjs/toolkit
        npm i react-redux

    - Create a store
        Create a new file appStore.js and userSlice.js

        userSlice.js =>
            import { createSlice } from "@reduxjs/toolkit";
            const userSlice = createSlice({
                name: "user",
                initialState: null,
                reducers: {
                    addUser: (state, action) => {
                    return action.payload;
                    },
                    removeUser: (state, action) => {
                    return null;
                    },
                },
            });
            export const { addUser, removeUser} = userSlice.actions;
            export default userSlice.reducer;

        appStore.js =>
            import { configureStore } from "@reduxjs/toolkit";
            import userReducer from "./userSlice";
            const appStore = configureStore({
                reducer: {
                    user: userReducer,
                },
            });
            export default appStore;

    - Add store to your app
        update App.js as follows =>

            import { Provider } from 'react-redux';
            import Body from './components/Body';
            import appStore from './utils/appStore';
            function App() {
                return (
                    <Provider store={appStore}>
                        <Body />
                    </Provider>
                );
            }
            export default App;

* Adding / removing User in store once user sign In Or Sign out

    - Call this API to check user Log In status and update the store

* Navigate user to Browse page once user LogsIn

    In Login page =>
        const navigate = useNavigate();
        navigate("/browse");

    similarly we can use SignOut API and navigate back

            const navigate = useNavigate();
            const user = useSelector((store) => store.user);
            const dispatch = useDispatch();
            const handleSignOut = () => {
                signOut(auth)
                .then(() => {
                    // Sign-out successful.
                    dispatch(removeUser());
                    navigate("/");
                })
                .catch((error) => {
                    // An error happened.
                });
            };

* We can use Update User API to update user displab name, photo URL using this API

        const updateUserProfile = (user) => {
            updateProfile(user, {
            displayName: name.current.value,
            photoURL:
                "https://avatars.githubusercontent.com/u/41838300?s=400&u=5d81ecb5a52602d688c4d608f80f5289a109a227&v=4",
            })
            .then(() => {
                const { uid, email, displayName, photoURL } = auth.currentUser;
                dispatch(
                addUser({
                    uid: uid,
                    email: email,
                    displayName: displayName,
                    photoURL: photoURL,
                })
                );
                navigate("/browse");
            })
            .catch((error) => {
                const errorCode = error.code;
                const errorMessage = error.message;
                setErrorMessage(errorCode + ": " + errorMessage);
            });
        };

    BUG Fixes =>
    1. SignUp user display name and profile picture update
    2. If user is not logged in dont show browse page
    3. If user is logged in dont show login page

    Also, when Header components unmounts we need to unsubscribe this event as it is not required
        const unsubscribe = onAuthStateChanged(auth, (user) => {
            //..
            //..
        })
        return () => unsubscribe();

* Fetch Movies from tmdb APIs

    API access : https://www.themoviedb.org/settings/api
        Create an application here, provide details and you will get the API key for access

    API call in Browse Page =>
        const getNowPlayingMovies = async () => {
            const response = await fetch(TMDB_API_URL, TMDB_API_OPTIONS);
            const json = await response.json();
            console.log(json);
        };

    Note : If the API call is happening for 2 times it is because of React Strict mode in index.js
            root.render(
                <React.StrictMode>
                    <App />
                </React.StrictMode>
            );

    Create A custom hook to call movie API
        useNowPlayingMovies.js =>
            import { useEffect } from "react";
            import { useDispatch } from "react-redux";
            import { TMDB_API_OPTIONS, TMDB_API_URL } from "../utils/constants";
            import { addNowPlayingMovies } from "../utils/movieSlice";

            const useNowPlayingMovies = () => {
                const dispatch = useDispatch();
                const getNowPlayingMovies = async () => {
                    const response = await fetch(TMDB_API_URL, TMDB_API_OPTIONS);
                    const json = await response.json();
                    dispatch(addNowPlayingMovies(json.results));
                    console.log(json.results);
                }

                useEffect(() => {
                    getNowPlayingMovies();
                }, []);
            }

            export default useNowPlayingMovies;

* Creating Browse component

    - Design a Video Container
        - Create subcomponent
            1. Video Title
            2. Video Background

        - You can add embedd youtube frame like this =>
            <div className="w-screen">
                <iframe
                    className="w-screen aspect-video"
                    src={YOUTUBE_BASE_URL+trailerVideo?.key+"?&autoplay=1&mute=1"}
                    title="YouTube video player"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture;"
                ></iframe>
            </div>

        - call Videos API of TMDB 
            TMDB_GET_MOVIE_VIDOE_API_URL = "https://api.themoviedb.org/3/movie/";
        
        - Update the store with Video trailers from above API.

        - Call store data and play video in background like netflix

   
    - Design a Video Listing Container
        This will be a lists of list scrolling horizontally
            Movielist - Pupular
            Movielist - Now Playing
            Movielist - Trending
            Movielist - Horror

        Create Followin components
            1. Movielist
            2. MovieCard
